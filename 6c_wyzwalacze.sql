-- AUTOR : MATEUSZ ZWEIGERT
  


DROP TRIGGER NIEPRAWIDLOWA_ILOSC;
-- WYZWALACZ SPRAWDZAJACY CZY ILOSC TOWAROW KTORA CHCEMY DOLACZYC DO ZAMOWIENIA JEST DOSTEPNA, TZN CZY W MAGAZYNACH JEST JEGO WYSTARCZAJACA ILOSC
CREATE OR REPlACE TRIGGER NIEPRAWIDLOWA_ILOSC
BEFORE INSERT OR UPDATE ON ZAMOWIENIE_HAS_TOWAR FOR EACH ROW
DECLARE
v_ilosc_wszystk MAGAZYN_HAS_TOWAR.ilosc%TYPE;
v_ilosc_niedost ZAMOWIENIE_HAS_TOWAR.ilosc%TYPE;
v_istnieje char(1);
PRAGMA autonomous_transaction;
BEGIN
 
  SELECT SUM(mht.ilosc) INTO v_ilosc_wszystk FROM MAGAZYN_HAS_TOWAR mht WHERE mht.towar_id = :new.towar_id;
   SELECT SUM(zht.ilosc) INTO v_ilosc_niedost FROM ZAMOWIENIE_HAS_TOWAR zht INNER JOIN ZAMOWIENIE z on zht.zamowienie_id=z.id 
   WHERE zht.towar_id = :new.towar_id AND ( z.oplacone = 1 OR z.ZREALIZOWANE = 1);
  IF :new.ilosc > v_ilosc_wszystk - v_ilosc_niedost THEN
    RAISE_APPLICATION_ERROR(-20099, 'Niestety, ilosc dostêpnych produktów wynosi mniej niz ' || :new.ilosc );
  END IF;
  COMMIT;
END;
SHOW ERRORS;
DECLARE
v_id_z INTEGER;
v_id_t INTEGER;
BEGIN
  SELECT id INTO v_id_z  FROM ZAMOWIENIE  WHERE ROWNUM = 1 ORDER BY ID ASC;
  SELECT id INTO v_id_t  FROM TOWAR  WHERE ROWNUM = 1 ORDER BY ID ASC;
  UPDATE ZAMOWIENIE_HAS_TOWAR SET ILOSC = 10000000 WHERE TOWAR_ID = 1 AND ZAMOWIENIE_ID = 1;
END;
   
-- WYZWALACZ SPRAWDZAJACY CZY NOWA UMOWA DLA PRACOWNIKA NIE ZAWIERA BLEDOW I JESLI JEDNA OBOWIAZUJACA UMOWA JUZ ISTNIEJE - WYZWALACZ OZNACZA JA JAKO NIEAUKTUALNA I WSTAWIA NOWA
CREATE OR REPlACE TRIGGER NIEPRAWIDLOWA_UMOWA
BEFORE INSERT OR UPDATE ON UMOWA FOR EACH ROW
DECLARE
v_istnieje CHAR(1);
BEGIN

   IF :new.data_podpisania >= :new.data_zakonczenia THEN
      RAISE_APPLICATION_ERROR(-20091, 'Data zakonczenia nie moze byæ wczeœniejsza ni¿ data podpisania' );
   END IF;

  IF INSERTING THEN
    IF :new.aktualna = '0' THEN
      RAISE_APPLICATION_ERROR(-20190, 'Umowa musi mieæ status aktualna = 1 oraz ' );
    END IF;
    SELECT COUNT(1) INTO v_istnieje FROM UMOWA u WHERE u.aktualna = '1' AND u.pracownik_id = :new.pracownik_id;
    IF v_istnieje = 1 THEN
      UPDATE UMOWA u SET u.aktualna = 0, u.data_zakonczenia = SYSDATE WHERE u.aktualna = '1' AND u.pracownik_id = :new.pracownik_id;
    END IF;
  END IF;
END;
/
DECLARE
v_id INTEGER;
v_i INTEGER;
BEGIN
  SELECT id INTO v_id  FROM PRACOWNIK  WHERE ROWNUM = 1;
  INSERT INTO UMOWA(PRACOWNIK_ID, DATA_PODPISANIA, DATA_ZAKONCZENIA, TYP, AKTUALNA) VALUES (v_id, SYSDATE, ADD_MONTHS(SYSDATE, -12), 'ZLECENIE', '1'); 
  INSERT INTO UMOWA(PRACOWNIK_ID, DATA_PODPISANIA, DATA_ZAKONCZENIA, TYP, AKTUALNA) VALUES (v_id, ADD_MONTHS(SYSDATE, -12), SYSDATE, 'ZLECENIE', '0'); 

  INSERT INTO UMOWA(PRACOWNIK_ID, DATA_PODPISANIA, DATA_ZAKONCZENIA, TYP, AKTUALNA) VALUES (v_id, ADD_MONTHS(SYSDATE, -12), SYSDATE, 'ZLECENIE', '1'); 
  INSERT INTO UMOWA(PRACOWNIK_ID, DATA_PODPISANIA, DATA_ZAKONCZENIA, TYP, AKTUALNA) VALUES (v_id, ADD_MONTHS(SYSDATE, -12), SYSDATE, 'O_PRACE', '1');
  SELECT COUNT(*) INTO v_i FROM UMOWA WHERE PRACOWNIK_ID = v_id;
  DBMS_OUTPUT.PUT_LINE(v_i);
END;

-- WYZWALACZ SPRAWDZAJACY ROZSZERZENIE WRZUCANEGO ZDJECIA
CREATE OR REPlACE TRIGGER NIEPRAWIDLOWY_PLIK
BEFORE INSERT OR UPDATE ON ZDJECIE FOR EACH ROW
DECLARE
v_istnieje CHAR(1);
v_r VARCHAR2(7);
BEGIN
   SELECT COUNT(1) INTO v_istnieje FROM ZDJECIE z WHERE z.nazwa = :new.nazwa AND z.rozszerzenie = :new.rozszerzenie;
   IF v_istnieje > 0 THEN
    RAISE_APPLICATION_ERROR(-20053, 'Zdjecie o podanej nazwie i rozszerzeniu istnieje ju¿ w bazie' );
   END IF;
   v_r := :new.rozszerzenie;
   IF v_r <> 'PNG' OR  v_r <> 'JPG' OR v_r <> 'JPEG' OR v_r <> 'BMP' THEN
    RAISE_APPLICATION_ERROR(-20051, 'Zdjecie posiada nieprawidlowe rozszerzenie. Dostepne formaty to PNG, JPG, JPEG lub BMP' );
   END IF;
END;
/
BEGIN
  INSERT INTO ZDJECIE(NAZWA, ROZSZERZENIE, DATA_UTWORZENIA, DANE, TOWAR_ID) VALUES ('zdj1', 'VAW1', SYSDATE, 'DANE1', 1);
END;

-- WYZWALACZ SPRAWDZAJACY CZY DANY RABAT PRZYPISANY DO KLIENTA NA DANY TOWAR, MIESIAC I ROK JEST WRZUCONY DO BAZY
CREATE OR REPlACE TRIGGER NIEPRAWIDLOWY_RABAT
BEFORE INSERT OR UPDATE ON RABAT FOR EACH ROW
DECLARE
v_istnieje CHAR(1);
v_r VARCHAR2(7);
BEGIN
    IF :new.procent > 60 THEN
       RAISE_APPLICATION_ERROR(-20051, 'Procent rabatu nie moze byc wiekszy niz 60' );
    END IF;
    IF INSERTING THEN
     SELECT COUNT(1) INTO v_istnieje FROM RABAT r WHERE r.klient_id = :new.klient_id AND r.towar_id = :new.towar_id AND r.WYKORZYSTANY = 0 AND r.TERMIN_WAZNOSCI >= SYSDATE;
     IF v_istnieje > 0 THEN
      DELETE FROM RABAT r WHERE r.klient_id = :new.klient_id AND r.towar_id = :new.towar_id AND r.WYKORZYSTANY = '0' AND r.TERMIN_WAZNOSCI >= SYSDATE;
     END IF;
    END IF;
    
END;
/
DECLARE
k_id INTEGER;
t_id INTEGER;
v_c integer;
BEGIN
  SELECT id INTO t_id FROM TOWAR WHERE ROWNUM = 1;
   SELECT id INTO k_id FROM KLIENT WHERE ROWNUM = 1;
  INSERT INTO RABAT(TERMIN_WAZNOSCI, PROCENT, WYKORZYSTANY, KLIENT_ID, TOWAR_ID) VALUES(ADD_MONTHS(SYSDATE,6), 20, 0, k_id, t_id);
  INSERT INTO RABAT(TERMIN_WAZNOSCI, PROCENT, WYKORZYSTANY, KLIENT_ID, TOWAR_ID) VALUES(ADD_MONTHS(SYSDATE,6), 20, 0, k_id, t_id);
  SELECT COUNT(*) INTO v_c FROM RABAT WHERE towar_id = t_id AND klient_id = k_id AND termin_waznosci > SYSDATE;
  DBMS_OUTPUT.PUT_LINE(v_c);
END;
-- WYZWALACZ SPRAWDZAJACY REGEXAMI DANE REKORDU ADRESU.
DROP TRIGGER NIEPRAWIDLOWY_ADRES;
CREATE OR REPlACE TRIGGER NIEPRAWIDLOWY_ADRES
BEFORE INSERT OR UPDATE ON ADRES
FOR EACH ROW
BEGIN
    IF REGEXP_LIKE (:new.miasto, '[^A-Za-z]') THEN
      RAISE_APPLICATION_ERROR(-20151, 'Miasto powinno posiadaæ tylko litery' );
    ELSIF REGEXP_LIKE (:new.ulica, '[^a-zA-Z0-9.-]') THEN
       RAISE_APPLICATION_ERROR(-20151, 'Ulica powinna posiadaæ tylko litery, liczby, znak kropki i myœlnik' );
    ELSIF NOT REGEXP_LIKE (:new.kod, '\d{2}[-]\d{3}') THEN 
       RAISE_APPLICATION_ERROR(-20151, 'Kod pocztowy jest nieprawidlowy. Schemat to xx-xxx' );
    ELSIF REGEXP_LIKE (:new.numer, '[^A-Za-z0-9/]+') THEN 
       RAISE_APPLICATION_ERROR(-20151, 'Numer powinien zawieraæ cyfry litery i znak /' );
    END IF;
      
END;
SHOW ERRORS;
BEGIN
  INSERT INTO ADRES(ULICA, MIASTO, NUMER, KOD) VALUES ('#@#$@#$', 'miasto', '123b', '00-999');
  INSERT INTO ADRES(ULICA, MIASTO, NUMER, KOD) VALUES ('j.pilsudskiego', '#$@#$s23423', '123b', '00-999');
  INSERT INTO ADRES(ULICA, MIASTO, NUMER, KOD) VALUES ('j.pilsudskiego', 'Gdansk', 'asdb123b', '0x-999');
  INSERT INTO ADRES(ULICA, MIASTO, NUMER, KOD) VALUES ('j.pilsudskiego', 'Gdansk', '345m/546', '00-999');
END;
